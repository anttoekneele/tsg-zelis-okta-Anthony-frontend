// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace FASAD.UI.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRolesResult : global::System.IEquatable<GetRolesResult>, IGetRolesResult
    {
        public GetRolesResult(global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetRoles_Roles> roles)
        {
            Roles = roles;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetRoles_Roles> Roles { get; }

        public virtual global::System.Boolean Equals(GetRolesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Roles, other.Roles));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRolesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Roles_elm in Roles)
                {
                    hash ^= 397 * Roles_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRoles_Roles_RoleDto : global::System.IEquatable<GetRoles_Roles_RoleDto>, IGetRoles_Roles_RoleDto
    {
        public GetRoles_Roles_RoleDto(global::System.Guid id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetRoles_Roles_RoleDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRoles_Roles_RoleDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetRolesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetRoles_Roles> Roles { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetRoles_Roles
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetRoles_Roles_RoleDto : IGetRoles_Roles
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class AssignUserRoleResult : global::System.IEquatable<AssignUserRoleResult>, IAssignUserRoleResult
    {
        public AssignUserRoleResult(global::System.Boolean assignUserRole)
        {
            AssignUserRole = assignUserRole;
        }

        public global::System.Boolean AssignUserRole { get; }

        public virtual global::System.Boolean Equals(AssignUserRoleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(AssignUserRole, other.AssignUserRole));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignUserRoleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AssignUserRole.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IAssignUserRoleResult
    {
        public global::System.Boolean AssignUserRole { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateUserResult : global::System.IEquatable<CreateUserResult>, ICreateUserResult
    {
        public CreateUserResult(global::System.Boolean createUser)
        {
            CreateUser = createUser;
        }

        public global::System.Boolean CreateUser { get; }

        public virtual global::System.Boolean Equals(CreateUserResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CreateUser, other.CreateUser));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateUserResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateUser.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ICreateUserResult
    {
        public global::System.Boolean CreateUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsersResult : global::System.IEquatable<GetUsersResult>, IGetUsersResult
    {
        public GetUsersResult(global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetUsers_Users> users)
        {
            Users = users;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetUsers_Users> Users { get; }

        public virtual global::System.Boolean Equals(GetUsersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Users, other.Users));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Users_elm in Users)
                {
                    hash ^= 397 * Users_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsers_Users_UserDto : global::System.IEquatable<GetUsers_Users_UserDto>, IGetUsers_Users_UserDto
    {
        public GetUsers_Users_UserDto(global::System.Guid id, global::System.String email, global::System.String roleName)
        {
            Id = id;
            Email = email;
            RoleName = roleName;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::System.String RoleName { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_UserDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Email.Equals(other.Email) && RoleName.Equals(other.RoleName);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_UserDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * RoleName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetUsersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetUsers_Users> Users { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetUsers_Users
    {
        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::System.String RoleName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetUsers_Users_UserDto : IGetUsers_Users
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LogoutEventResult : global::System.IEquatable<LogoutEventResult>, ILogoutEventResult
    {
        public LogoutEventResult(global::System.Boolean logoutEvent)
        {
            LogoutEvent = logoutEvent;
        }

        public global::System.Boolean LogoutEvent { get; }

        public virtual global::System.Boolean Equals(LogoutEventResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(LogoutEvent, other.LogoutEvent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LogoutEventResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LogoutEvent.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ILogoutEventResult
    {
        public global::System.Boolean LogoutEvent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleAssignedEventResult : global::System.IEquatable<RoleAssignedEventResult>, IRoleAssignedEventResult
    {
        public RoleAssignedEventResult(global::System.Boolean roleAssignedEvent)
        {
            RoleAssignedEvent = roleAssignedEvent;
        }

        public global::System.Boolean RoleAssignedEvent { get; }

        public virtual global::System.Boolean Equals(RoleAssignedEventResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(RoleAssignedEvent, other.RoleAssignedEvent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RoleAssignedEventResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RoleAssignedEvent.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IRoleAssignedEventResult
    {
        public global::System.Boolean RoleAssignedEvent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEventsResult : global::System.IEquatable<GetSecurityEventsResult>, IGetSecurityEventsResult
    {
        public GetSecurityEventsResult(global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetSecurityEvents_SecurityEvents> securityEvents)
        {
            SecurityEvents = securityEvents;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetSecurityEvents_SecurityEvents> SecurityEvents { get; }

        public virtual global::System.Boolean Equals(GetSecurityEventsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(SecurityEvents, other.SecurityEvents));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEventsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var SecurityEvents_elm in SecurityEvents)
                {
                    hash ^= 397 * SecurityEvents_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEvents_SecurityEvents_SecurityEventDto : global::System.IEquatable<GetSecurityEvents_SecurityEvents_SecurityEventDto>, IGetSecurityEvents_SecurityEvents_SecurityEventDto
    {
        public GetSecurityEvents_SecurityEvents_SecurityEventDto(global::System.Guid id, global::System.String eventType, global::System.DateTimeOffset occurredUtc, global::System.String details, global::System.String authorUserEmail, global::System.String affectedUserEmail)
        {
            Id = id;
            EventType = eventType;
            OccurredUtc = occurredUtc;
            Details = details;
            AuthorUserEmail = authorUserEmail;
            AffectedUserEmail = affectedUserEmail;
        }

        public global::System.Guid Id { get; }
        public global::System.String EventType { get; }
        public global::System.DateTimeOffset OccurredUtc { get; }
        public global::System.String Details { get; }
        public global::System.String AuthorUserEmail { get; }
        public global::System.String AffectedUserEmail { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_SecurityEventDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && EventType.Equals(other.EventType) && OccurredUtc.Equals(other.OccurredUtc) && Details.Equals(other.Details) && AuthorUserEmail.Equals(other.AuthorUserEmail) && AffectedUserEmail.Equals(other.AffectedUserEmail);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_SecurityEventDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * EventType.GetHashCode();
                hash ^= 397 * OccurredUtc.GetHashCode();
                hash ^= 397 * Details.GetHashCode();
                hash ^= 397 * AuthorUserEmail.GetHashCode();
                hash ^= 397 * AffectedUserEmail.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSecurityEventsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetSecurityEvents_SecurityEvents> SecurityEvents { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSecurityEvents_SecurityEvents
    {
        public global::System.Guid Id { get; }
        public global::System.String EventType { get; }
        public global::System.DateTimeOffset OccurredUtc { get; }
        public global::System.String Details { get; }
        public global::System.String AuthorUserEmail { get; }
        public global::System.String AffectedUserEmail { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_SecurityEventDto : IGetSecurityEvents_SecurityEvents
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LoginSuccessEventResult : global::System.IEquatable<LoginSuccessEventResult>, ILoginSuccessEventResult
    {
        public LoginSuccessEventResult(global::System.Boolean loginSuccessEvent)
        {
            LoginSuccessEvent = loginSuccessEvent;
        }

        public global::System.Boolean LoginSuccessEvent { get; }

        public virtual global::System.Boolean Equals(LoginSuccessEventResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(LoginSuccessEvent, other.LoginSuccessEvent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LoginSuccessEventResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LoginSuccessEvent.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ILoginSuccessEventResult
    {
        public global::System.Boolean LoginSuccessEvent { get; }
    }

    /// <summary>
    /// Represents the operation service of the GetRoles GraphQL operation
    /// <code>
    /// query GetRoles {
    ///   roles {
    ///     __typename
    ///     id
    ///     name
    ///     ... on RoleDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRolesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRolesQueryDocument()
        {
        }

        public static GetRolesQueryDocument Instance { get; } = new GetRolesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x44,
            0x74,
            0x6f,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "68b710acac9cb8673fcc01c6c416a032");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRoles GraphQL operation
    /// <code>
    /// query GetRoles {
    ///   roles {
    ///     __typename
    ///     id
    ///     name
    ///     ... on RoleDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRolesQuery : global::FASAD.UI.GraphQL.IGetRolesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRolesResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetRolesQuery(global::StrawberryShake.IOperationExecutor<IGetRolesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetRolesQuery(global::StrawberryShake.IOperationExecutor<IGetRolesResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRolesResult);

        public global::FASAD.UI.GraphQL.IGetRolesQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.GetRolesQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::FASAD.UI.GraphQL.IGetRolesQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.IGetRolesQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRolesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRolesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRolesQueryDocument.Instance.Hash.Value, name: "GetRoles", document: GetRolesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRoles GraphQL operation
    /// <code>
    /// query GetRoles {
    ///   roles {
    ///     __typename
    ///     id
    ///     name
    ///     ... on RoleDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetRolesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.IGetRolesQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.IGetRolesQuery WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.IGetRolesQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRolesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRolesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AssignUserRole GraphQL operation
    /// <code>
    /// mutation AssignUserRole($email: String!, $roleName: String!) {
    ///   assignUserRole(email: $email, roleName: $roleName)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class AssignUserRoleMutationDocument : global::StrawberryShake.IDocument
    {
        private AssignUserRoleMutationDocument()
        {
        }

        public static AssignUserRoleMutationDocument Instance { get; } = new AssignUserRoleMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x73,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x55,
            0x73,
            0x65,
            0x72,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x28,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x73,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x55,
            0x73,
            0x65,
            0x72,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x28,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x2c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bd60733583f4b19a0dffb22a6e80836c");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignUserRole GraphQL operation
    /// <code>
    /// mutation AssignUserRole($email: String!, $roleName: String!) {
    ///   assignUserRole(email: $email, roleName: $roleName)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class AssignUserRoleMutation : global::FASAD.UI.GraphQL.IAssignUserRoleMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAssignUserRoleResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public AssignUserRoleMutation(global::StrawberryShake.IOperationExecutor<IAssignUserRoleResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private AssignUserRoleMutation(global::StrawberryShake.IOperationExecutor<IAssignUserRoleResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAssignUserRoleResult);

        public global::FASAD.UI.GraphQL.IAssignUserRoleMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.AssignUserRoleMutation(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::FASAD.UI.GraphQL.IAssignUserRoleMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.IAssignUserRoleMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignUserRoleResult>> ExecuteAsync(global::System.String email, global::System.String roleName, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email, roleName);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignUserRoleResult>> Watch(global::System.String email, global::System.String roleName, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email, roleName);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String email, global::System.String roleName)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            variables.Add("roleName", FormatRoleName(roleName));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AssignUserRoleMutationDocument.Instance.Hash.Value, name: "AssignUserRole", document: AssignUserRoleMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatRoleName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignUserRole GraphQL operation
    /// <code>
    /// mutation AssignUserRole($email: String!, $roleName: String!) {
    ///   assignUserRole(email: $email, roleName: $roleName)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IAssignUserRoleMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.IAssignUserRoleMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.IAssignUserRoleMutation WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.IAssignUserRoleMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignUserRoleResult>> ExecuteAsync(global::System.String email, global::System.String roleName, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignUserRoleResult>> Watch(global::System.String email, global::System.String roleName, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// mutation CreateUser($externalId: String!, $email: String!) {
    ///   createUser(externalId: $externalId, email: $email)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateUserMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateUserMutationDocument()
        {
        }

        public static CreateUserMutationDocument Instance { get; } = new CreateUserMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x43,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x55,
            0x73,
            0x65,
            0x72,
            0x28,
            0x24,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x55,
            0x73,
            0x65,
            0x72,
            0x28,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9e558bcd9798a427c72bae0a1c0ecae7");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// mutation CreateUser($externalId: String!, $email: String!) {
    ///   createUser(externalId: $externalId, email: $email)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateUserMutation : global::FASAD.UI.GraphQL.ICreateUserMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateUserResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public CreateUserMutation(global::StrawberryShake.IOperationExecutor<ICreateUserResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private CreateUserMutation(global::StrawberryShake.IOperationExecutor<ICreateUserResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateUserResult);

        public global::FASAD.UI.GraphQL.ICreateUserMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.CreateUserMutation(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::FASAD.UI.GraphQL.ICreateUserMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.ICreateUserMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateUserResult>> ExecuteAsync(global::System.String externalId, global::System.String email, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(externalId, email);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateUserResult>> Watch(global::System.String externalId, global::System.String email, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(externalId, email);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String externalId, global::System.String email)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("externalId", FormatExternalId(externalId));
            variables.Add("email", FormatEmail(email));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateUserMutationDocument.Instance.Hash.Value, name: "CreateUser", document: CreateUserMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatExternalId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateUser GraphQL operation
    /// <code>
    /// mutation CreateUser($externalId: String!, $email: String!) {
    ///   createUser(externalId: $externalId, email: $email)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ICreateUserMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.ICreateUserMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.ICreateUserMutation WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.ICreateUserMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateUserResult>> ExecuteAsync(global::System.String externalId, global::System.String email, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateUserResult>> Watch(global::System.String externalId, global::System.String email, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     roleName
    ///     ... on UserDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUsersQueryDocument()
        {
        }

        public static GetUsersQueryDocument Instance { get; } = new GetUsersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x44,
            0x74,
            0x6f,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "645ac94acad9689626b588e9043af303");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     roleName
    ///     ... on UserDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsersQuery : global::FASAD.UI.GraphQL.IGetUsersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUsersResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUsersResult);

        public global::FASAD.UI.GraphQL.IGetUsersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.GetUsersQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::FASAD.UI.GraphQL.IGetUsersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.IGetUsersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUsersQueryDocument.Instance.Hash.Value, name: "GetUsers", document: GetUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     roleName
    ///     ... on UserDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetUsersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.IGetUsersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.IGetUsersQuery WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.IGetUsersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the LogoutEvent GraphQL operation
    /// <code>
    /// mutation LogoutEvent($email: String!) {
    ///   logoutEvent(email: $email)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LogoutEventMutationDocument : global::StrawberryShake.IDocument
    {
        private LogoutEventMutationDocument()
        {
        }

        public static LogoutEventMutationDocument Instance { get; } = new LogoutEventMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x4c,
            0x6f,
            0x67,
            0x6f,
            0x75,
            0x74,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x28,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x6f,
            0x67,
            0x6f,
            0x75,
            0x74,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x28,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "90c88d5273de0ede14517a24461d39df");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the LogoutEvent GraphQL operation
    /// <code>
    /// mutation LogoutEvent($email: String!) {
    ///   logoutEvent(email: $email)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LogoutEventMutation : global::FASAD.UI.GraphQL.ILogoutEventMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ILogoutEventResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public LogoutEventMutation(global::StrawberryShake.IOperationExecutor<ILogoutEventResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private LogoutEventMutation(global::StrawberryShake.IOperationExecutor<ILogoutEventResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ILogoutEventResult);

        public global::FASAD.UI.GraphQL.ILogoutEventMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.LogoutEventMutation(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::FASAD.UI.GraphQL.ILogoutEventMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.ILogoutEventMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILogoutEventResult>> ExecuteAsync(global::System.String email, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ILogoutEventResult>> Watch(global::System.String email, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String email)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: LogoutEventMutationDocument.Instance.Hash.Value, name: "LogoutEvent", document: LogoutEventMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the LogoutEvent GraphQL operation
    /// <code>
    /// mutation LogoutEvent($email: String!) {
    ///   logoutEvent(email: $email)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ILogoutEventMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.ILogoutEventMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.ILogoutEventMutation WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.ILogoutEventMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILogoutEventResult>> ExecuteAsync(global::System.String email, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ILogoutEventResult>> Watch(global::System.String email, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RoleAssignedEvent GraphQL operation
    /// <code>
    /// mutation RoleAssignedEvent($authorUserEmail: String!, $affectedUserEmail: String!, $fromRoleName: String!, $toRoleName: String!) {
    ///   roleAssignedEvent(authorUserEmail: $authorUserEmail, affectedUserEmail: $affectedUserEmail, fromRoleName: $fromRoleName, toRoleName: $toRoleName)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleAssignedEventMutationDocument : global::StrawberryShake.IDocument
    {
        private RoleAssignedEventMutationDocument()
        {
        }

        public static RoleAssignedEventMutationDocument Instance { get; } = new RoleAssignedEventMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x41,
            0x73,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x28,
            0x24,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x61,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x65,
            0x64,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x74,
            0x6f,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x41,
            0x73,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x65,
            0x64,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x28,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x2c,
            0x20,
            0x61,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x65,
            0x64,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x61,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x65,
            0x64,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x2c,
            0x20,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x2c,
            0x20,
            0x74,
            0x6f,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x74,
            0x6f,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c0ef1d39979b9192b4fc26c9b0f6c715");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RoleAssignedEvent GraphQL operation
    /// <code>
    /// mutation RoleAssignedEvent($authorUserEmail: String!, $affectedUserEmail: String!, $fromRoleName: String!, $toRoleName: String!) {
    ///   roleAssignedEvent(authorUserEmail: $authorUserEmail, affectedUserEmail: $affectedUserEmail, fromRoleName: $fromRoleName, toRoleName: $toRoleName)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleAssignedEventMutation : global::FASAD.UI.GraphQL.IRoleAssignedEventMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRoleAssignedEventResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public RoleAssignedEventMutation(global::StrawberryShake.IOperationExecutor<IRoleAssignedEventResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private RoleAssignedEventMutation(global::StrawberryShake.IOperationExecutor<IRoleAssignedEventResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRoleAssignedEventResult);

        public global::FASAD.UI.GraphQL.IRoleAssignedEventMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.RoleAssignedEventMutation(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::FASAD.UI.GraphQL.IRoleAssignedEventMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.IRoleAssignedEventMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRoleAssignedEventResult>> ExecuteAsync(global::System.String authorUserEmail, global::System.String affectedUserEmail, global::System.String fromRoleName, global::System.String toRoleName, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(authorUserEmail, affectedUserEmail, fromRoleName, toRoleName);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRoleAssignedEventResult>> Watch(global::System.String authorUserEmail, global::System.String affectedUserEmail, global::System.String fromRoleName, global::System.String toRoleName, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(authorUserEmail, affectedUserEmail, fromRoleName, toRoleName);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String authorUserEmail, global::System.String affectedUserEmail, global::System.String fromRoleName, global::System.String toRoleName)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("authorUserEmail", FormatAuthorUserEmail(authorUserEmail));
            variables.Add("affectedUserEmail", FormatAffectedUserEmail(affectedUserEmail));
            variables.Add("fromRoleName", FormatFromRoleName(fromRoleName));
            variables.Add("toRoleName", FormatToRoleName(toRoleName));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RoleAssignedEventMutationDocument.Instance.Hash.Value, name: "RoleAssignedEvent", document: RoleAssignedEventMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAuthorUserEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatAffectedUserEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatFromRoleName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatToRoleName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RoleAssignedEvent GraphQL operation
    /// <code>
    /// mutation RoleAssignedEvent($authorUserEmail: String!, $affectedUserEmail: String!, $fromRoleName: String!, $toRoleName: String!) {
    ///   roleAssignedEvent(authorUserEmail: $authorUserEmail, affectedUserEmail: $affectedUserEmail, fromRoleName: $fromRoleName, toRoleName: $toRoleName)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IRoleAssignedEventMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.IRoleAssignedEventMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.IRoleAssignedEventMutation WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.IRoleAssignedEventMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRoleAssignedEventResult>> ExecuteAsync(global::System.String authorUserEmail, global::System.String affectedUserEmail, global::System.String fromRoleName, global::System.String toRoleName, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRoleAssignedEventResult>> Watch(global::System.String authorUserEmail, global::System.String affectedUserEmail, global::System.String fromRoleName, global::System.String toRoleName, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSecurityEvents GraphQL operation
    /// <code>
    /// query GetSecurityEvents {
    ///   securityEvents {
    ///     __typename
    ///     id
    ///     eventType
    ///     occurredUtc
    ///     details
    ///     authorUserEmail
    ///     affectedUserEmail
    ///     ... on SecurityEventDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEventsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSecurityEventsQueryDocument()
        {
        }

        public static GetSecurityEventsQueryDocument Instance { get; } = new GetSecurityEventsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x53,
            0x65,
            0x63,
            0x75,
            0x72,
            0x69,
            0x74,
            0x79,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x65,
            0x63,
            0x75,
            0x72,
            0x69,
            0x74,
            0x79,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x6f,
            0x63,
            0x63,
            0x75,
            0x72,
            0x72,
            0x65,
            0x64,
            0x55,
            0x74,
            0x63,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x61,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x65,
            0x64,
            0x55,
            0x73,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x65,
            0x63,
            0x75,
            0x72,
            0x69,
            0x74,
            0x79,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x44,
            0x74,
            0x6f,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "f9d64c698d729ff895c2118e636aa4c7");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSecurityEvents GraphQL operation
    /// <code>
    /// query GetSecurityEvents {
    ///   securityEvents {
    ///     __typename
    ///     id
    ///     eventType
    ///     occurredUtc
    ///     details
    ///     authorUserEmail
    ///     affectedUserEmail
    ///     ... on SecurityEventDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEventsQuery : global::FASAD.UI.GraphQL.IGetSecurityEventsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSecurityEventsResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetSecurityEventsQuery(global::StrawberryShake.IOperationExecutor<IGetSecurityEventsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetSecurityEventsQuery(global::StrawberryShake.IOperationExecutor<IGetSecurityEventsResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSecurityEventsResult);

        public global::FASAD.UI.GraphQL.IGetSecurityEventsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.GetSecurityEventsQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::FASAD.UI.GraphQL.IGetSecurityEventsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.IGetSecurityEventsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSecurityEventsQueryDocument.Instance.Hash.Value, name: "GetSecurityEvents", document: GetSecurityEventsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSecurityEvents GraphQL operation
    /// <code>
    /// query GetSecurityEvents {
    ///   securityEvents {
    ///     __typename
    ///     id
    ///     eventType
    ///     occurredUtc
    ///     details
    ///     authorUserEmail
    ///     affectedUserEmail
    ///     ... on SecurityEventDto {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IGetSecurityEventsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.IGetSecurityEventsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.IGetSecurityEventsQuery WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.IGetSecurityEventsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the LoginSuccessEvent GraphQL operation
    /// <code>
    /// mutation LoginSuccessEvent($email: String!, $provider: String!) {
    ///   loginSuccessEvent(email: $email, provider: $provider)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LoginSuccessEventMutationDocument : global::StrawberryShake.IDocument
    {
        private LoginSuccessEventMutationDocument()
        {
        }

        public static LoginSuccessEventMutationDocument Instance { get; } = new LoginSuccessEventMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x4c,
            0x6f,
            0x67,
            0x69,
            0x6e,
            0x53,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x28,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x70,
            0x72,
            0x6f,
            0x76,
            0x69,
            0x64,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6c,
            0x6f,
            0x67,
            0x69,
            0x6e,
            0x53,
            0x75,
            0x63,
            0x63,
            0x65,
            0x73,
            0x73,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x28,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x2c,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x76,
            0x69,
            0x64,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x72,
            0x6f,
            0x76,
            0x69,
            0x64,
            0x65,
            0x72,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4819e6dfa7142c3d3d87740c0d4be646");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the LoginSuccessEvent GraphQL operation
    /// <code>
    /// mutation LoginSuccessEvent($email: String!, $provider: String!) {
    ///   loginSuccessEvent(email: $email, provider: $provider)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LoginSuccessEventMutation : global::FASAD.UI.GraphQL.ILoginSuccessEventMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ILoginSuccessEventResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public LoginSuccessEventMutation(global::StrawberryShake.IOperationExecutor<ILoginSuccessEventResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private LoginSuccessEventMutation(global::StrawberryShake.IOperationExecutor<ILoginSuccessEventResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ILoginSuccessEventResult);

        public global::FASAD.UI.GraphQL.ILoginSuccessEventMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::FASAD.UI.GraphQL.LoginSuccessEventMutation(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::FASAD.UI.GraphQL.ILoginSuccessEventMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::FASAD.UI.GraphQL.ILoginSuccessEventMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILoginSuccessEventResult>> ExecuteAsync(global::System.String email, global::System.String provider, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email, provider);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ILoginSuccessEventResult>> Watch(global::System.String email, global::System.String provider, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email, provider);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String email, global::System.String provider)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            variables.Add("provider", FormatProvider(provider));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: LoginSuccessEventMutationDocument.Instance.Hash.Value, name: "LoginSuccessEvent", document: LoginSuccessEventMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatProvider(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the LoginSuccessEvent GraphQL operation
    /// <code>
    /// mutation LoginSuccessEvent($email: String!, $provider: String!) {
    ///   loginSuccessEvent(email: $email, provider: $provider)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface ILoginSuccessEventMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::FASAD.UI.GraphQL.ILoginSuccessEventMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::FASAD.UI.GraphQL.ILoginSuccessEventMutation WithRequestUri(global::System.Uri requestUri);
        global::FASAD.UI.GraphQL.ILoginSuccessEventMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ILoginSuccessEventResult>> ExecuteAsync(global::System.String email, global::System.String provider, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ILoginSuccessEventResult>> Watch(global::System.String email, global::System.String provider, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the FASADClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class FASADClient : global::FASAD.UI.GraphQL.IFASADClient
    {
        private readonly global::FASAD.UI.GraphQL.IGetRolesQuery _getRoles;
        private readonly global::FASAD.UI.GraphQL.IAssignUserRoleMutation _assignUserRole;
        private readonly global::FASAD.UI.GraphQL.ICreateUserMutation _createUser;
        private readonly global::FASAD.UI.GraphQL.IGetUsersQuery _getUsers;
        private readonly global::FASAD.UI.GraphQL.ILogoutEventMutation _logoutEvent;
        private readonly global::FASAD.UI.GraphQL.IRoleAssignedEventMutation _roleAssignedEvent;
        private readonly global::FASAD.UI.GraphQL.IGetSecurityEventsQuery _getSecurityEvents;
        private readonly global::FASAD.UI.GraphQL.ILoginSuccessEventMutation _loginSuccessEvent;
        public FASADClient(global::FASAD.UI.GraphQL.IGetRolesQuery getRoles, global::FASAD.UI.GraphQL.IAssignUserRoleMutation assignUserRole, global::FASAD.UI.GraphQL.ICreateUserMutation createUser, global::FASAD.UI.GraphQL.IGetUsersQuery getUsers, global::FASAD.UI.GraphQL.ILogoutEventMutation logoutEvent, global::FASAD.UI.GraphQL.IRoleAssignedEventMutation roleAssignedEvent, global::FASAD.UI.GraphQL.IGetSecurityEventsQuery getSecurityEvents, global::FASAD.UI.GraphQL.ILoginSuccessEventMutation loginSuccessEvent)
        {
            _getRoles = getRoles ?? throw new global::System.ArgumentNullException(nameof(getRoles));
            _assignUserRole = assignUserRole ?? throw new global::System.ArgumentNullException(nameof(assignUserRole));
            _createUser = createUser ?? throw new global::System.ArgumentNullException(nameof(createUser));
            _getUsers = getUsers ?? throw new global::System.ArgumentNullException(nameof(getUsers));
            _logoutEvent = logoutEvent ?? throw new global::System.ArgumentNullException(nameof(logoutEvent));
            _roleAssignedEvent = roleAssignedEvent ?? throw new global::System.ArgumentNullException(nameof(roleAssignedEvent));
            _getSecurityEvents = getSecurityEvents ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents));
            _loginSuccessEvent = loginSuccessEvent ?? throw new global::System.ArgumentNullException(nameof(loginSuccessEvent));
        }

        public static global::System.String ClientName => "FASADClient";
        public global::FASAD.UI.GraphQL.IGetRolesQuery GetRoles => _getRoles;
        public global::FASAD.UI.GraphQL.IAssignUserRoleMutation AssignUserRole => _assignUserRole;
        public global::FASAD.UI.GraphQL.ICreateUserMutation CreateUser => _createUser;
        public global::FASAD.UI.GraphQL.IGetUsersQuery GetUsers => _getUsers;
        public global::FASAD.UI.GraphQL.ILogoutEventMutation LogoutEvent => _logoutEvent;
        public global::FASAD.UI.GraphQL.IRoleAssignedEventMutation RoleAssignedEvent => _roleAssignedEvent;
        public global::FASAD.UI.GraphQL.IGetSecurityEventsQuery GetSecurityEvents => _getSecurityEvents;
        public global::FASAD.UI.GraphQL.ILoginSuccessEventMutation LoginSuccessEvent => _loginSuccessEvent;
    }

    /// <summary>
    /// Represents the FASADClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial interface IFASADClient
    {
        global::FASAD.UI.GraphQL.IGetRolesQuery GetRoles { get; }

        global::FASAD.UI.GraphQL.IAssignUserRoleMutation AssignUserRole { get; }

        global::FASAD.UI.GraphQL.ICreateUserMutation CreateUser { get; }

        global::FASAD.UI.GraphQL.IGetUsersQuery GetUsers { get; }

        global::FASAD.UI.GraphQL.ILogoutEventMutation LogoutEvent { get; }

        global::FASAD.UI.GraphQL.IRoleAssignedEventMutation RoleAssignedEvent { get; }

        global::FASAD.UI.GraphQL.IGetSecurityEventsQuery GetSecurityEvents { get; }

        global::FASAD.UI.GraphQL.ILoginSuccessEventMutation LoginSuccessEvent { get; }
    }
}

namespace FASAD.UI.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleDtoEntity
    {
        public RoleDtoEntity(global::System.Guid id = default !, global::System.String name = default !)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UserDtoEntity
    {
        public UserDtoEntity(global::System.Guid id = default !, global::System.String email = default !, global::System.String roleName = default !)
        {
            Id = id;
            Email = email;
            RoleName = roleName;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::System.String RoleName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class SecurityEventDtoEntity
    {
        public SecurityEventDtoEntity(global::System.Guid id = default !, global::System.String eventType = default !, global::System.DateTimeOffset occurredUtc = default !, global::System.String details = default !, global::System.String authorUserEmail = default !, global::System.String affectedUserEmail = default !)
        {
            Id = id;
            EventType = eventType;
            OccurredUtc = occurredUtc;
            Details = details;
            AuthorUserEmail = authorUserEmail;
            AffectedUserEmail = affectedUserEmail;
        }

        public global::System.Guid Id { get; }
        public global::System.String EventType { get; }
        public global::System.DateTimeOffset OccurredUtc { get; }
        public global::System.String Details { get; }
        public global::System.String AuthorUserEmail { get; }
        public global::System.String AffectedUserEmail { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRolesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.GetRolesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.RoleDtoEntity, GetRoles_Roles_RoleDto> _getRoles_Roles_RoleDtoFromRoleDtoEntityMapper;
        public GetRolesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.RoleDtoEntity, GetRoles_Roles_RoleDto> getRoles_Roles_RoleDtoFromRoleDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRoles_Roles_RoleDtoFromRoleDtoEntityMapper = getRoles_Roles_RoleDtoFromRoleDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRoles_Roles_RoleDtoFromRoleDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.IGetRolesResult);

        public GetRolesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRolesResultInfo info)
            {
                return new GetRolesResult(MapNonNullableIGetRoles_RolesNonNullableArray(info.Roles, snapshot));
            }

            throw new global::System.ArgumentException("GetRolesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetRoles_Roles> MapNonNullableIGetRoles_RolesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var roleDtos = new global::System.Collections.Generic.List<global::FASAD.UI.GraphQL.IGetRoles_Roles>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                roleDtos.Add(MapNonNullableIGetRoles_Roles(child, snapshot));
            }

            return roleDtos;
        }

        private global::FASAD.UI.GraphQL.IGetRoles_Roles MapNonNullableIGetRoles_Roles(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("RoleDto", global::System.StringComparison.Ordinal))
            {
                return _getRoles_Roles_RoleDtoFromRoleDtoEntityMapper.Map(snapshot.GetEntity<global::FASAD.UI.GraphQL.State.RoleDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRolesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRolesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> roles, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Roles = roles;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Roles { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRolesResultInfo(Roles, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class AssignUserRoleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.AssignUserRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AssignUserRoleResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.IAssignUserRoleResult);

        public AssignUserRoleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AssignUserRoleResultInfo info)
            {
                return new AssignUserRoleResult(info.AssignUserRole);
            }

            throw new global::System.ArgumentException("AssignUserRoleResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class AssignUserRoleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AssignUserRoleResultInfo(global::System.Boolean assignUserRole, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AssignUserRole = assignUserRole;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean AssignUserRole { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AssignUserRoleResultInfo(AssignUserRole, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateUserResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.CreateUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateUserResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.ICreateUserResult);

        public CreateUserResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateUserResultInfo info)
            {
                return new CreateUserResult(info.CreateUser);
            }

            throw new global::System.ArgumentException("CreateUserResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateUserResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateUserResultInfo(global::System.Boolean createUser, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateUser = createUser;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean CreateUser { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateUserResultInfo(CreateUser, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.GetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.UserDtoEntity, GetUsers_Users_UserDto> _getUsers_Users_UserDtoFromUserDtoEntityMapper;
        public GetUsersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.UserDtoEntity, GetUsers_Users_UserDto> getUsers_Users_UserDtoFromUserDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsers_Users_UserDtoFromUserDtoEntityMapper = getUsers_Users_UserDtoFromUserDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_Users_UserDtoFromUserDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.IGetUsersResult);

        public GetUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUsersResultInfo info)
            {
                return new GetUsersResult(MapNonNullableIGetUsers_UsersNonNullableArray(info.Users, snapshot));
            }

            throw new global::System.ArgumentException("GetUsersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetUsers_Users> MapNonNullableIGetUsers_UsersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var userDtos = new global::System.Collections.Generic.List<global::FASAD.UI.GraphQL.IGetUsers_Users>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                userDtos.Add(MapNonNullableIGetUsers_Users(child, snapshot));
            }

            return userDtos;
        }

        private global::FASAD.UI.GraphQL.IGetUsers_Users MapNonNullableIGetUsers_Users(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("UserDto", global::System.StringComparison.Ordinal))
            {
                return _getUsers_Users_UserDtoFromUserDtoEntityMapper.Map(snapshot.GetEntity<global::FASAD.UI.GraphQL.State.UserDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUsersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> users, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Users = users;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Users { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUsersResultInfo(Users, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LogoutEventResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.LogoutEventResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public LogoutEventResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.ILogoutEventResult);

        public LogoutEventResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is LogoutEventResultInfo info)
            {
                return new LogoutEventResult(info.LogoutEvent);
            }

            throw new global::System.ArgumentException("LogoutEventResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LogoutEventResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public LogoutEventResultInfo(global::System.Boolean logoutEvent, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            LogoutEvent = logoutEvent;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean LogoutEvent { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new LogoutEventResultInfo(LogoutEvent, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleAssignedEventResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.RoleAssignedEventResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RoleAssignedEventResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.IRoleAssignedEventResult);

        public RoleAssignedEventResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RoleAssignedEventResultInfo info)
            {
                return new RoleAssignedEventResult(info.RoleAssignedEvent);
            }

            throw new global::System.ArgumentException("RoleAssignedEventResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleAssignedEventResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RoleAssignedEventResultInfo(global::System.Boolean roleAssignedEvent, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RoleAssignedEvent = roleAssignedEvent;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean RoleAssignedEvent { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RoleAssignedEventResultInfo(RoleAssignedEvent, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEventsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.GetSecurityEventsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity, GetSecurityEvents_SecurityEvents_SecurityEventDto> _getSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper;
        public GetSecurityEventsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity, GetSecurityEvents_SecurityEvents_SecurityEventDto> getSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper = getSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.IGetSecurityEventsResult);

        public GetSecurityEventsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSecurityEventsResultInfo info)
            {
                return new GetSecurityEventsResult(MapNonNullableIGetSecurityEvents_SecurityEventsNonNullableArray(info.SecurityEvents, snapshot));
            }

            throw new global::System.ArgumentException("GetSecurityEventsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::FASAD.UI.GraphQL.IGetSecurityEvents_SecurityEvents> MapNonNullableIGetSecurityEvents_SecurityEventsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var securityEventDtos = new global::System.Collections.Generic.List<global::FASAD.UI.GraphQL.IGetSecurityEvents_SecurityEvents>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                securityEventDtos.Add(MapNonNullableIGetSecurityEvents_SecurityEvents(child, snapshot));
            }

            return securityEventDtos;
        }

        private global::FASAD.UI.GraphQL.IGetSecurityEvents_SecurityEvents MapNonNullableIGetSecurityEvents_SecurityEvents(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SecurityEventDto", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper.Map(snapshot.GetEntity<global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEventsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSecurityEventsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> securityEvents, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SecurityEvents = securityEvents;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> SecurityEvents { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSecurityEventsResultInfo(SecurityEvents, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LoginSuccessEventResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.LoginSuccessEventResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public LoginSuccessEventResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::FASAD.UI.GraphQL.ILoginSuccessEventResult);

        public LoginSuccessEventResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is LoginSuccessEventResultInfo info)
            {
                return new LoginSuccessEventResult(info.LoginSuccessEvent);
            }

            throw new global::System.ArgumentException("LoginSuccessEventResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LoginSuccessEventResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public LoginSuccessEventResultInfo(global::System.Boolean loginSuccessEvent, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            LoginSuccessEvent = loginSuccessEvent;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean LoginSuccessEvent { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new LoginSuccessEventResultInfo(LoginSuccessEvent, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRolesBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.IGetRolesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetRolesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetRolesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetRolesResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> rolesId = default !;
            _entityStore.Update(session =>
            {
                rolesId = Update_NonNullableIGetRoles_RolesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roles"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetRolesResultInfo(rolesId, entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Update_NonNullableIGetRoles_RolesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var roleDtos = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                roleDtos.Add(Update_NonNullableIGetRoles_RolesEntity(session, child, entityIds));
            }

            return roleDtos;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetRoles_RolesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("RoleDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::FASAD.UI.GraphQL.State.RoleDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::FASAD.UI.GraphQL.State.RoleDtoEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::FASAD.UI.GraphQL.State.RoleDtoEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class AssignUserRoleBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.IAssignUserRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AssignUserRoleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IAssignUserRoleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IAssignUserRoleResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new AssignUserRoleResultInfo(Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "assignUserRole")), entityIds, snapshot.Version);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class CreateUserBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.ICreateUserResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public CreateUserBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ICreateUserResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ICreateUserResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new CreateUserResultInfo(Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createUser")), entityIds, snapshot.Version);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsersBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.IGetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetUsersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> usersId = default !;
            _entityStore.Update(session =>
            {
                usersId = Update_NonNullableIGetUsers_UsersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetUsersResultInfo(usersId, entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Update_NonNullableIGetUsers_UsersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var userDtos = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userDtos.Add(Update_NonNullableIGetUsers_UsersEntity(session, child, entityIds));
            }

            return userDtos;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetUsers_UsersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("UserDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::FASAD.UI.GraphQL.State.UserDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::FASAD.UI.GraphQL.State.UserDtoEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roleName"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::FASAD.UI.GraphQL.State.UserDtoEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roleName"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LogoutEventBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.ILogoutEventResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public LogoutEventBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILogoutEventResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILogoutEventResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new LogoutEventResultInfo(Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "logoutEvent")), entityIds, snapshot.Version);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class RoleAssignedEventBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.IRoleAssignedEventResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public RoleAssignedEventBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IRoleAssignedEventResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IRoleAssignedEventResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new RoleAssignedEventResultInfo(Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roleAssignedEvent")), entityIds, snapshot.Version);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEventsBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.IGetSecurityEventsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetSecurityEventsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetSecurityEventsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetSecurityEventsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> securityEventsId = default !;
            _entityStore.Update(session =>
            {
                securityEventsId = Update_NonNullableIGetSecurityEvents_SecurityEventsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "securityEvents"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetSecurityEventsResultInfo(securityEventsId, entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Update_NonNullableIGetSecurityEvents_SecurityEventsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var securityEventDtos = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                securityEventDtos.Add(Update_NonNullableIGetSecurityEvents_SecurityEventsEntity(session, child, entityIds));
            }

            return securityEventDtos;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetSecurityEvents_SecurityEventsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SecurityEventDto", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity? entity))
                {
                    session.SetEntity(entityId, new global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eventType")), Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "occurredUtc")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorUserEmail")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "affectedUserEmail"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eventType")), Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "occurredUtc")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorUserEmail")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "affectedUserEmail"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class LoginSuccessEventBuilder : global::StrawberryShake.OperationResultBuilder<global::FASAD.UI.GraphQL.ILoginSuccessEventResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public LoginSuccessEventBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILoginSuccessEventResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILoginSuccessEventResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new LoginSuccessEventResultInfo(Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "loginSuccessEvent")), entityIds, snapshot.Version);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetRoles_Roles_RoleDtoFromRoleDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.RoleDtoEntity, GetRoles_Roles_RoleDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRoles_Roles_RoleDtoFromRoleDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRoles_Roles_RoleDto Map(global::FASAD.UI.GraphQL.State.RoleDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRoles_Roles_RoleDto(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetUsers_Users_UserDtoFromUserDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.UserDtoEntity, GetUsers_Users_UserDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUsers_Users_UserDtoFromUserDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUsers_Users_UserDto Map(global::FASAD.UI.GraphQL.State.UserDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsers_Users_UserDto(entity.Id, entity.Email, entity.RoleName);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class GetSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper : global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity, GetSecurityEvents_SecurityEvents_SecurityEventDto>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSecurityEvents_SecurityEvents_SecurityEventDto Map(global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSecurityEvents_SecurityEvents_SecurityEventDto(entity.Id, entity.EventType, entity.OccurredUtc, entity.Details, entity.AuthorUserEmail, entity.AffectedUserEmail);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class FASADClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "RoleDto" => ParseRoleDtoEntityId(obj, __typename),
                "UserDto" => ParseUserDtoEntityId(obj, __typename),
                "SecurityEventDto" => ParseSecurityEventDtoEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "RoleDto" => FormatRoleDtoEntityId(entityId),
                "UserDto" => FormatUserDtoEntityId(entityId),
                "SecurityEventDto" => FormatSecurityEventDtoEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseRoleDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRoleDtoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserDtoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSecurityEventDtoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSecurityEventDtoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class FASADClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public FASADClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public static partial class FASADClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::FASAD.UI.GraphQL.State.FASADClientStoreAccessor> AddFASADClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::FASAD.UI.GraphQL.State.FASADClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.GetRolesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.AssignUserRoleMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.CreateUserMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.GetUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.LogoutEventMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.RoleAssignedEventMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.GetSecurityEventsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.LoginSuccessEventMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.FASADClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.IFASADClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::FASAD.UI.GraphQL.State.FASADClientStoreAccessor>("FASADClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("FASADClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.RoleDtoEntity, global::FASAD.UI.GraphQL.GetRoles_Roles_RoleDto>, global::FASAD.UI.GraphQL.State.GetRoles_Roles_RoleDtoFromRoleDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.UserDtoEntity, global::FASAD.UI.GraphQL.GetUsers_Users_UserDto>, global::FASAD.UI.GraphQL.State.GetUsers_Users_UserDtoFromUserDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::FASAD.UI.GraphQL.State.SecurityEventDtoEntity, global::FASAD.UI.GraphQL.GetSecurityEvents_SecurityEvents_SecurityEventDto>, global::FASAD.UI.GraphQL.State.GetSecurityEvents_SecurityEvents_SecurityEventDtoFromSecurityEventDtoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetRolesResult>, global::FASAD.UI.GraphQL.State.GetRolesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetRolesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.IGetRolesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetRolesResult>, global::FASAD.UI.GraphQL.State.GetRolesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.IGetRolesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetRolesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetRolesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.GetRolesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.IGetRolesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.GetRolesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IAssignUserRoleResult>, global::FASAD.UI.GraphQL.State.AssignUserRoleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IAssignUserRoleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.IAssignUserRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IAssignUserRoleResult>, global::FASAD.UI.GraphQL.State.AssignUserRoleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.IAssignUserRoleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IAssignUserRoleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IAssignUserRoleResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.AssignUserRoleMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.IAssignUserRoleMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.AssignUserRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ICreateUserResult>, global::FASAD.UI.GraphQL.State.CreateUserResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ICreateUserResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.ICreateUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ICreateUserResult>, global::FASAD.UI.GraphQL.State.CreateUserBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.ICreateUserResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ICreateUserResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ICreateUserResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.CreateUserMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.ICreateUserMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.CreateUserMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetUsersResult>, global::FASAD.UI.GraphQL.State.GetUsersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetUsersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.IGetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetUsersResult>, global::FASAD.UI.GraphQL.State.GetUsersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.IGetUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetUsersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.GetUsersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.IGetUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.GetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILogoutEventResult>, global::FASAD.UI.GraphQL.State.LogoutEventResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILogoutEventResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.ILogoutEventMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ILogoutEventResult>, global::FASAD.UI.GraphQL.State.LogoutEventBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.ILogoutEventResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ILogoutEventResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ILogoutEventResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.LogoutEventMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.ILogoutEventMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.LogoutEventMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IRoleAssignedEventResult>, global::FASAD.UI.GraphQL.State.RoleAssignedEventResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IRoleAssignedEventResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.IRoleAssignedEventMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IRoleAssignedEventResult>, global::FASAD.UI.GraphQL.State.RoleAssignedEventBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.IRoleAssignedEventResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IRoleAssignedEventResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IRoleAssignedEventResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.RoleAssignedEventMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.IRoleAssignedEventMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.RoleAssignedEventMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetSecurityEventsResult>, global::FASAD.UI.GraphQL.State.GetSecurityEventsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.IGetSecurityEventsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.IGetSecurityEventsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetSecurityEventsResult>, global::FASAD.UI.GraphQL.State.GetSecurityEventsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.IGetSecurityEventsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetSecurityEventsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.IGetSecurityEventsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.GetSecurityEventsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.IGetSecurityEventsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.GetSecurityEventsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILoginSuccessEventResult>, global::FASAD.UI.GraphQL.State.LoginSuccessEventResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::FASAD.UI.GraphQL.ILoginSuccessEventResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.ILoginSuccessEventMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ILoginSuccessEventResult>, global::FASAD.UI.GraphQL.State.LoginSuccessEventBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::FASAD.UI.GraphQL.ILoginSuccessEventResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ILoginSuccessEventResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::FASAD.UI.GraphQL.ILoginSuccessEventResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.LoginSuccessEventMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.ILoginSuccessEventMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.LoginSuccessEventMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::FASAD.UI.GraphQL.State.FASADClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.FASADClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::FASAD.UI.GraphQL.IFASADClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::FASAD.UI.GraphQL.FASADClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
