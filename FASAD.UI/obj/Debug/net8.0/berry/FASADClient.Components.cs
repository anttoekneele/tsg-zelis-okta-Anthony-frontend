// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace FASAD.UI.GraphQL.Components
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UseGetRoles : global::StrawberryShake.Razor.UseQuery<global::FASAD.UI.GraphQL.IGetRolesResult>
    {
        [global::Microsoft.AspNetCore.Components.InjectAttribute]
        internal global::FASAD.UI.GraphQL.GetRolesQuery Operation { get; set; } = default !;

        protected override void OnInitialized()
        {
            Subscribe(Operation.Watch(strategy: Strategy));
        }

        protected override void OnParametersSet()
        {
            Subscribe(Operation.Watch(strategy: Strategy));
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UseGetUsers : global::StrawberryShake.Razor.UseQuery<global::FASAD.UI.GraphQL.IGetUsersResult>
    {
        [global::Microsoft.AspNetCore.Components.InjectAttribute]
        internal global::FASAD.UI.GraphQL.GetUsersQuery Operation { get; set; } = default !;

        protected override void OnInitialized()
        {
            Subscribe(Operation.Watch(strategy: Strategy));
        }

        protected override void OnParametersSet()
        {
            Subscribe(Operation.Watch(strategy: Strategy));
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.10.0")]
    public partial class UseGetSecurityEvents : global::StrawberryShake.Razor.UseQuery<global::FASAD.UI.GraphQL.IGetSecurityEventsResult>
    {
        [global::Microsoft.AspNetCore.Components.InjectAttribute]
        internal global::FASAD.UI.GraphQL.GetSecurityEventsQuery Operation { get; set; } = default !;

        protected override void OnInitialized()
        {
            Subscribe(Operation.Watch(strategy: Strategy));
        }

        protected override void OnParametersSet()
        {
            Subscribe(Operation.Watch(strategy: Strategy));
        }
    }
}
